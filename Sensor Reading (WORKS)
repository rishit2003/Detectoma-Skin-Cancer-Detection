// This code captures temperature and distance readings only when a button is pressed.
// Then it sends the values to the Firebase

#include <Arduino.h>
#include<WiFi.h>
#include<FirebaseClient.h>
#include <WiFiClientSecure.h>
#include <Wire.h>
#include <Adafruit_MLX90614.h>

#define TRIG_PIN 13
#define ECHO_PIN 12
#define BUTTON_PIN 33
// Add SCL and SDA according to ESP32-Freenove-Wrover-Cam Datasheet

#define SOUND_SPEED 0.034
#define CM_TO_INCH 0.393701

#define WIFI_SSID "ENTER_YOUR_NETWORK"
#define WIFI_PASSWORD "ENTER_YOUR_PASSWORD"
#define API_KEY "AIzaSyCW6EV_qD-BusrijT5aButGagZm-WNaZLI"
#define DATABASE_URL "https://esp32-demo-d3ba3-default-rtdb.firebaseio.com/"

WiFiClientSecure ssl;
DefaultNetwork network;
AsyncClientClass client(ssl, getNetwork(network));
FirebaseApp app;
RealtimeDatabase Database;
AsyncResult result;
NoAuth noAuth;

Adafruit_MLX90614 mlx = Adafruit_MLX90614();
long duration;
float distanceCm;
float temp;
int buttonState;

void setup() {
  Serial.begin(115200); // Starts the serial communication
  pinMode(TRIG_PIN, OUTPUT); // Sets the trigPin as an Output
  pinMode(ECHO_PIN, INPUT); // Sets the echoPin as an Input
  pinMode(BUTTON_PIN, INPUT_PULLUP); // Set the Button Pin as input pullup
  mlx.begin();

  Serial.print("Connecting to Wi-Fi...");
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  while(WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(300);
  }
    Serial.print("Connecting to Wi-Fi...");
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  while(WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(300);
  }

  // Set up Firebase client
  ssl.setInsecure();
  initializeApp(client, app, getAuth(noAuth));
  app.getApp<RealtimeDatabase>(Database);
  Database.url(DATABASE_URL);
  client.setAsyncResult(result);

}

void loop() {
  buttonState = digitalRead(BUTTON_PIN);
  Serial.println(buttonState);
  if (buttonState == HIGH){
  // Clears the trigPin
  digitalWrite(TRIG_PIN, LOW);
  delayMicroseconds(2);
  // Sets the trigPin on HIGH state for 10 micro seconds
  digitalWrite(TRIG_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN, LOW);
  
  // Reads the echoPin, returns the sound wave travel time in microseconds
  duration = pulseIn(ECHO_PIN, HIGH);
  
  // Calculate the distance
  distanceCm = duration * SOUND_SPEED/2;

  
  // Prints the distance in the Serial Monitor
  Serial.print("Distance (cm): ");
  Serial.println(distanceCm);
  
  temp = mlx.readObjectTempC();
  Serial.print("*C\tObject = "); 
  Serial.print(temp);
  Serial.println("*C");

  String path = "/Patient/";
  String UID = "w6AlYkUH0lM5lneVoOz6Y9g0miW2";
  path.concat(UID);
  String TempPath = path + "/Temp/";
  Serial.println("UID is: "+ UID);

  // Set a float value in Firebase
  if (Database.set<float>(client, TempPath, temp)) {
    Serial.println("Data sent successfully");
  } else {
    Serial.printf("Failed to send data. Error: %s\n", client.lastError().message().c_str());
  }

  delay(10);
  
  // Set a float value for distance to Firebase
String DistPath = path + "/Distance/";
  if (Database.set<float>(client, DistPath, distanceCm)) {
    Serial.println("Data sent successfully");
  } else {
    Serial.printf("Failed to send data. Error: %s\n", client.lastError().message().c_str());
  }

  Serial.println();
  delay(500);

  delay(1000);
  }
}
